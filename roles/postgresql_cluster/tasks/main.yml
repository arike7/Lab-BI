---
- name: Import PGDG GPG key
  become: yes
  ansible.builtin.rpm_key:
    key: https://download.postgresql.org/pub/repos/yum/keys/RPM-GPG-KEY-PGDG

- name: Install EPEL (to get perl-IPC-Run and other extras)
  become: yes
  ansible.builtin.dnf:
    name: oracle-epel-release-el8
    state: present

- name: Add official PGDG repository
  become: yes
  ansible.builtin.yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: present
    disable_gpg_check: yes

- name: Disable built-in PostgreSQL module
  become: yes
  ansible.builtin.command: dnf -qy module disable postgresql

- name: Ensure Perl installed
  become: yes
  ansible.builtin.dnf:
    name:
      - perl
    state: present

- name: Ensure python3, pip and dev dependencies are installed
  become: yes
  ansible.builtin.yum:
    name:
      - python3
      - python3-pip
      - python3-setuptools
      - gcc
      - python3-devel
      - libffi-devel
      - openssl-devel
      - rust
      - cargo
    state: present

- name: Install pip wheel and setuptools_rust
  ansible.builtin.pip:
    name:
      - wheel
      - setuptools_rust
    executable: pip3
  become: yes

- name: Install Patroni with etcd support via pip
  become: yes
  ansible.builtin.pip:
    name: patroni[etcd]
    executable: pip3

- name: Install PostgreSQL 16
  become: yes
  ansible.builtin.dnf:
    name:
      - postgresql16-server
    state: present
    enablerepo: pgdg16

- name: Install PostgreSQL contrib package (for pg_stat_statements)
  become: yes
  ansible.builtin.dnf:
    name: postgresql16-contrib
    state: present
    enablerepo: pgdg16

- name: Install psycopg2 driver
  become: yes
  ansible.builtin.dnf:
    name: python3-psycopg2
    state: present

- name: Clean DNF cache
  ansible.builtin.command: dnf clean all
  become: yes

- name: Make DNF cache
  ansible.builtin.command: dnf makecache
  become: yes

- name: Download ETCD tools (for etcdctl only)
  become: yes
  ansible.builtin.get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/v3.5.0/etcd-v3.5.0-linux-amd64.tar.gz"
    dest: "/tmp/etcdctl.tar.gz"
    mode: '0644'

- name: Extract only etcdctl binary
  become: yes
  ansible.builtin.unarchive:
    src: "/tmp/etcdctl.tar.gz"
    dest: "/usr/local/bin/"
    remote_src: yes
    extra_opts: [--strip-components=1]
    mode: '0755'
  args:
    creates: "/usr/local/bin/etcdctl"

- name: Initialize PostgreSQL data directory (if not already initialized)
  become: yes
  ansible.builtin.command: "/usr/pgsql-16/bin/postgresql-16-setup initdb"
  args:
    creates: "/var/lib/pgsql/16/data/postgresql.conf"

# --- Start PG to configure ---
- name: Enable and start PostgreSQL service for config
  become: yes
  ansible.builtin.systemd:
    name: postgresql-16
    state: started
    enabled: yes

- name: Wait for PostgreSQL to become available
  become: yes
  ansible.builtin.wait_for:
    host: "127.0.0.1"
    port: 5432
    delay: 5
    timeout: 120
    state: started

# --- Configure PostgreSQL ---
- name: Set password for postgres user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    db: postgres
    name: postgres
    password: "{{ pg_postgres_password }}"
    state: present

- name: Create test_user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    db: postgres
    name: test_user
    password: "{{ pg_test_user_password }}"
    priv: CONNECT
    state: present

- name: Create test_db1
  become: yes
  become_user: postgres
  community.postgresql.postgresql_db:
    name: test_db1
    owner: test_user
    state: present

- name: Allow test_user to connect to test_db1
  become: yes
  become_user: postgres
  community.postgresql.postgresql_privs:
    db: test_db1
    privs: CONNECT
    type: database
    roles: test_user
    state: present

- name: Enable pg_stat_statements
  become: yes
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/16/data/postgresql.conf
    regexp: '^#?shared_preload_libraries\s*=\s*'
    line: "shared_preload_libraries = 'pg_stat_statements'"
    state: present
    backup: yes

- name: Create pg_stat_statements extension
  become: yes
  become_user: postgres
  community.postgresql.postgresql_ext:
    db: test_db1
    name: pg_stat_statements
    state: present

- name: Create svc_monitoring user
  become: yes
  become_user: postgres
  community.postgresql.postgresql_user:
    db: postgres
    name: svc_monitoring
    password: "{{ pg_monitoring_password }}"
    state: present

- name: Grant monitoring permissions to svc_monitoring
  become: yes
  become_user: postgres
  community.postgresql.postgresql_query:
    db: postgres
    query: |
      GRANT pg_monitor TO svc_monitoring;

# --- Stop PG (Patroni will manage it) ---
- name: Stop PostgreSQL service
  become: yes
  ansible.builtin.systemd:
    name: postgresql-16
    state: stopped
    enabled: no

- name: Copy Patroni config
  become: yes
  ansible.builtin.template:
    src: patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: '0644'
  notify: Restart Patroni

- name: Enable and start Patroni
  become: yes
  ansible.builtin.systemd:
    name: patroni
    enabled: yes
    state: started

- name: Wait for Patroni to bring PostgreSQL up
  become: yes
  ansible.builtin.wait_for:
    host: "{{ inventory_hostname }}"
    port: 5432
    delay: 5
    timeout: 180
    state: started

- name: Download node_exporter
  ansible.builtin.get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz"
    dest: "/tmp/node_exporter-1.7.0.linux-amd64.tar.gz"
    mode: '0644'
  become: yes

- name: Extract node_exporter
  ansible.builtin.unarchive:
    src: "/tmp/node_exporter-1.7.0.linux-amd64.tar.gz"
    dest: "/usr/local/bin/"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: node_exporter
    group: node_exporter
    mode: '0755'
    creates: "/usr/local/bin/node_exporter"
  become: yes

- name: Create node_exporter systemd service file
  ansible.builtin.template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify: Start node_exporter

- name: Clean up ETCD archive
  ansible.builtin.file:
    path: /tmp/etcdctl.tar.gz
    state: absent
  become: yes

- name: Clean up node_exporter archive
  ansible.builtin.file:
    path: /tmp/node_exporter-1.7.0.linux-amd64.tar.gz
    state: absent
  become: yes

- name: Enable and start node_exporter service
  ansible.builtin.systemd:
    name: node_exporter
    enabled: yes
    state: started
  become: yes